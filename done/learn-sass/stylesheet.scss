// # VARIABLES
//
//   Think of variables as a way to store information that you want to reuse
//   throughout your stylesheet. You can store things like colors, font stacks,
//   or any CSS value you think you'll want to reuse. Sass uses the $ symbol to
//   make something a variable. Here's an example:
//
     // $font-stack:    Helvetica, sans-serif;
     // $primary-color: #333;

//      body {
//        font: 100% $font-stack;
//        color: $primary-color;
//      }
//
//   When the Sass is processed, it takes the variables we define for the
//   $font-stack and $primary-color and outputs normal CSS with our variable
//   values placed in the CSS. This can be extremely powerful when working with
//   brand colors and keeping them consistent throughout the site.
//
//      body {
//        font: 100% Helvetica, sans-serif;
//        color: #333;
//      }
//
//  # EXERCISE
//
//   Write a stylesheet that defines a variable $color, sets its value to
//   '#000', and uses it to set the color style of the body element.
//
//   --
//
//  ## HINTS
//
//   To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
//   and start writing SCSS. When you are done, you must run:
//
//      $ learn-sass verify stylesheet.scss
//
//   to proceed. Your stylesheet will be tested, a report will be generated,
//   and the lesson will be marked 'completed' if you are successful.

      // $color: #000;
      //
      // body {
      //       color: $color;
      // }

      //
      // Your submission results compared to the expected:
      //
      //                  ACTUAL                                 EXPECTED
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //    "body {"                            ==    "body {"
      //    "  color: #000; }"                  ==    "  color: #000; }"
      //    ""                                  ==    ""
      //    ""                                  ==    ""
      //
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //   ✓  Submission results match expected
      //
      //   # PASS Your solution to VARIABLES passed!
      //
      //   Here's the official solution in case you want to compare notes:
      //
      //   /usr/local/lib/node_modules/learn-sass/exercises/variables/solution/soluti
      //   on.scss
      //
      //   You have 12 challenges left. Type 'learn-sass' to show the menu.

//
// # NESTING
//
// When writing HTML you've probably noticed that it has a clear nested and
// visual hierarchy. CSS, on the other hand, doesn't. Here's an example of
// some typical styles for a site's navigation:
//
//   nav {
//     ul {
//       margin: 0;
//       padding: 0;
//       list-style: none;
//     }
//
//     li { display: inline-block; }
//
//     a {
//       display: block;
//       padding: 6px 12px;
//       text-decoration: none;
//     }
//   }
//
// You'll notice that the ul, li, and a selectors are nested inside the nav
// selector. This is a great way to organize your CSS and make it more
// readable. When you generate the CSS you'll get something like this:
//
//   nav ul {
//     margin: 0;
//     padding: 0;
//     list-style: none;
//   }
//
//   nav li {
//     display: inline-block;
//   }
//
//   nav a {
//     display: block;
//     padding: 6px 12px;
//     text-decoration: none;
//   }
//
// # EXERCISE
//
// Write a stylesheet that sets margin: 0 to the ul, and color of links to
// red for elements contained within an aside element, using nesting.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.

      // aside {
      //       ul{
      //             margin: 0;
      //       }
      //       a {
      //             color: red;
      //       }
      // }

      // Your submission results compared to the expected:
      //
      //                  ACTUAL                                 EXPECTED
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //    "aside ul {"                        ==    "aside ul {"
      //    "  margin: 0; }"                    ==    "  margin: 0; }"
      //    ""                                  ==    ""
      //    "aside a {"                         ==    "aside a {"
      //    "  color: red; }"                   ==    "  color: red; }"
      //    ""                                  ==    ""
      //    ""                                  ==    ""
      //
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //   ✓  Submission results match expected
      //
      //   # PASS Your solution to NESTING passed!
      //
      //   Here's the official solution in case you want to compare notes:
      //
      //   /usr/local/lib/node_modules/learn-sass/exercises/nesting/solution/solution
      //   .scss
      //
      //   You have 11 challenges left. Type 'learn-sass' to show the menu.

      // # IMPORTS
      //
      //  CSS has an import option that lets you split your CSS into smaller, more
      //  maintainable portions. The only drawback is that each time you use @import
      //  in CSS it creates another HTTP request. Sass builds on top of the current
      //  CSS @import but instead of requiring an HTTP request, Sass will take the
      //  file that you want to import and combine it with the file you're importing
      //  into so you can serve a single CSS file to the web browser.
      //
      //  Let's say you have a couple of Sass files, _reset.scss and base.scss. We
      //  want to import _reset.scss into base.scss.
      //
      //     // _reset.scss
      //
      //     html,
      //     body,
      //     ul,
      //     ol {
      //        margin: 0;
      //       padding: 0;
      //     }
      //
      //     // base.scss
      //
      //     @import 'reset';
      //
      //     body {
      //       font: 100% Helvetica, sans-serif;
      //       background-color: #efefef;
      //     }
      //
      //  Notice we're using @import 'reset'; in the base.scss file. When you import
      //  a file you don't need to include the file extension .scss. Sass is smart
      //  and will figure it out for you. When you generate the CSS you'll get:
      //
      //     html, body, ul, ol {
      //       margin: 0;
      //       padding: 0;
      //     }
      //
      //     body {
      //       font: 100% Helvetica, sans-serif;
      //       background-color: #efefef;
      //     }
      //
      // # EXERCISE
      //
      //  Write a partial that defines a variable $color and sets its value to
      //  '#ff0000', and a stylesheet that imports the partial, and uses the
      //  variable to set the color style of the body element.
      //
      //  --
      //
      // ## HINTS
      //
      //  To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
      //  and start writing SCSS. When you are done, you must run:
      //
      //     $ learn-sass verify stylesheet.scss
      //
      //  to proceed. Your stylesheet will be tested, a report will be generated,
      //  and the lesson will be marked 'completed' if you are successful.

//       @import 'color';
//
//             body{
//                   color: $color;
//             }
//             Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    "body {"                            ==    "body {"
//    "  color: #ff0000; }"               ==    "  color: #ff0000; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to IMPORTS passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/imports/solution/solution
//   .scss
//
//   You have 10 challenges left. Type 'learn-sass' to show the menu.


// # MIXINS
//
// Some things in CSS are a bit tedious to write, especially with CSS3 and
// the many vendor prefixes that exist. A mixin lets you make groups of CSS
// declarations that you want to reuse throughout your site. You can even
// pass in values to make your mixin more flexible. A good use of a mixin is
// for vendor prefixes. Here's an example for border-radius.
//
//   @mixin border-radius($radius) {
//     -webkit-border-radius: $radius;
//        -moz-border-radius: $radius;
//         -ms-border-radius: $radius;
//             border-radius: $radius;
//   }
//
//   .box { @include border-radius(10px); }
//
// To create a mixin you use the @mixin directive and give it a name. We've
// named our mixin border-radius. We're also using the variable $radius
// inside the parentheses so we can pass in a radius of whatever we want.
// After you create your mixin, you can then use it as a CSS declaration
// starting with @include followed by the name of the mixin. When your CSS is
// generated it'll look like this:
//
//   .box {
//     -webkit-border-radius: 10px;
//     -moz-border-radius: 10px;
//     -ms-border-radius: 10px;
//     border-radius: 10px;
//   }
//
// # EXERCISE
//
// Write a mixin border that accepts a variable $thickness and sets the
// border-width style to the value of $thickness. Then, include the mixin in
// a rule for the img element, and set its border thickness to 10px.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.

//       @mixin border-width($thickness){
//                 border-width: $thickness;
//       }
//
//       img{ @include border-width(10px) }
//       Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    "img {"                             ==    "img {"
//    "  border-width: 10px; }"           ==    "  border-width: 10px; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to MIXINS passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/mixins/solution/solution.
//   scss
//
//   You have 9 challenges left. Type 'learn-sass' to show the menu.


// # MIXIN CONTENT
//
//  Passing Content Blocks to a Mixin
//
//  It is possible to pass a block of styles to the mixin for placement within
//  the styles included by the mixin. The styles will appear at the location
//  of any @content directives found within the mixin. This makes it possible
//  to define abstractions relating to the construction of selectors and
//  directives.
//
//  For example:
//
//     @mixin apply-to-ie6-only {
//       * html {
//         @content;
//       }
//     }
//     @include apply-to-ie6-only {
//       #logo {
//         background-image: url(/logo.gif);
//       }
//     }
//
//  Generates:
//
//     * html #logo {
//       background-image: url(/logo.gif);
//     }
//
//  Note: when the @content directive is specified more than once or in a
//  loop, the style block will be duplicated with each invocation.
//
// # EXERCISE
//
//  Modify the border-thickness mixin from the previous exercise to also
//  accept a @content, and invoke it by passing in a rule that sets the
//  border-style of the img element to solid.
//
//  --
//
// ## HINTS
//
//  To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
//  and start writing SCSS. When you are done, you must run:
//
//     $ learn-sass verify stylesheet.scss
//
//  to proceed. Your stylesheet will be tested, a report will be generated,
//  and the lesson will be marked 'completed' if you are successful.


      // @mixin border-width($thickness ){
      //           border-width: $thickness;
      //           border-style: solid;
      // }
      //
      //
      //       img{ @include border-width(10px) }
      //
      //       Your submission results compared to the expected:
      //
      //                        ACTUAL                                 EXPECTED
      //       ────────────────────────────────────────────────────────────────────────────────
      //
      //          "img {"                             ==    "img {"
      //          "  border-width: 10px;"             ==    "  border-width: 10px;"
      //          "  border-style: solid; }"          ==    "  border-style: solid; }"
      //          ""                                  ==    ""
      //          ""                                  ==    ""
      //
      //       ────────────────────────────────────────────────────────────────────────────────
      //
      //         ✓  Submission results match expected
      //
      //         # PASS Your solution to MIXIN CONTENT passed!
      //
      //         Here's the official solution in case you want to compare notes:
      //
      //         /usr/local/lib/node_modules/learn-sass/exercises/mixin_content/solution/so
      //         lution.scss
      //
      //         You have 8 challenges left. Type 'learn-sass' to show the menu.


    // # EXTEND/INHERITANCE
    //
    //  This is one of the most useful features of Sass. Using @extend lets you
    //  share a set of CSS properties from one selector to another. It helps keep
    //  your Sass very DRY. In our example we're going to create a simple series
    //  of messaging for errors, warnings and successes.
    //
    //     .message {
    //       border: 1px solid #ccc;
    //       padding: 10px;
    //       color: #333;
    //     }
    //
    //     .success {
    //       @extend .message;
    //       border-color: green;
    //     }
    //
    //     .error {
    //       @extend .message;
    //       border-color: red;
    //     }
    //
    //     .warning {
    //       @extend .message;
    //       border-color: yellow;
    //     }
    //
    //  What the above code does is allow you to take the CSS properties in
    //  .message and apply them to .success, .error, & .warning. The magic happens
    //  with the generated CSS, and this helps you avoid having to write multiple
    //  class names on HTML elements. This is what it looks like:
    //
    //     .message, .success, .error, .warning {
    //       border: 1px solid #cccccc;
    //       padding: 10px;
    //       color: #333;
    //     }
    //
    //     .success {
    //       border-color: green;
    //     }
    //
    //     .error {
    //       border-color: red;
    //     }
    //
    //     .warning {
    //       border-color: yellow;
    //     }
    //
    // # EXERCISE
    //
    //  Write a rule for the selector .push-button with a background-color: blue,
    //  and a rule for the selector .main-button so that it extends .push-button,
    //  and also sets the font-weight: bold.
    //
    //  --
    //
    // ## HINTS
    //
    //  To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
    //  and start writing SCSS. When you are done, you must run:
    //
    //     $ learn-sass verify stylesheet.scss
    //
    //  to proceed. Your stylesheet will be tested, a report will be generated,
    //  and the lesson will be marked 'completed' if you are successful.


   //  .push-button{
   //        background-color: blue;
   // }
   // .main-button{
   //       @extend .push-button;
   //       font-weight: bold;
   // }
   //
   // Your submission results compared to the expected:
   //
   //                  ACTUAL                                 EXPECTED
   // ────────────────────────────────────────────────────────────────────────────────
   //
   //    ".push-button, .main-button {"      ==    ".push-button, .main-button {"
   //    "  background-color: blue; }"       ==    "  background-color: blue; }"
   //    ""                                  ==    ""
   //    ".main-button {"                    ==    ".main-button {"
   //    "  font-weight: bold; }"            ==    "  font-weight: bold; }"
   //    ""                                  ==    ""
   //    ""                                  ==    ""
   //
   // ────────────────────────────────────────────────────────────────────────────────
   //
   //   ✓  Submission results match expected
   //
   //   # PASS Your solution to EXTEND/INHERITANCE passed!
   //
   //   Here's the official solution in case you want to compare notes:
   //
   //   /usr/local/lib/node_modules/learn-sass/exercises/extend_inheritance/soluti
   //   on/solution.scss
   //
   //   You have 7 challenges left. Type 'learn-sass' to show the menu.



 // # OPERATORS
 //
 //  Doing math in your CSS is very helpful. Sass has a handful of standard
 //  math operators like +, -, *, /, and %. In our example we're going to do
 //  some simple math to calculate widths for an aside & article.
 //
 //     .container { width: 100%; }
 //
 //     article[role="main"] {
 //       float: left;
 //       width: 600px / 960px * 100%;
 //     }
 //
 //     aside[role="complimentary"] {
 //       float: right;
 //       width: 300px / 960px * 100%;
 //     }
 //
 //  We've created a very simple fluid grid, based on 960px. Operations in Sass
 //  let us do something like take pixel values and convert them to percentages
 //  without much hassle. The generated CSS will look like:
 //
 //     .container {
 //       width: 100%;
 //     }
 //
 //     article[role="main"] {
 //       float: left;
 //       width: 62.5%;
 //     }
 //
 //     aside[role="complimentary"] {
 //       float: right;
 //       width: 31.25%;
 //     }
 //
 // # EXERCISE
 //
 //  Define a variable $page-width with a value of 1400px, and a variable
 //  $padding with a value of 20px. Then, define a rule for a selector
 //  .container, set its padding to the value of $padding, and its width to 0.8
 //  times the value of $page-width, minus twice the value of $padding.
 //
 //  --
 //
 // ## HINTS
 //
 //  To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
 //  and start writing SCSS. When you are done, you must run:
 //
 //     $ learn-sass verify stylesheet.scss
 //
 //  to proceed. Your stylesheet will be tested, a report will be generated,
 //  and the lesson will be marked 'completed' if you are successful.

 // $page-width: 1400px;
 // $padding: 20px;
 //
 //      .container{
 //            padding: $padding;
 //            width: 0.8*$page-width - 2*$padding;
 //      }
 //
 //      Your submission results compared to the expected:
 //
 //                       ACTUAL                                 EXPECTED
 //      ────────────────────────────────────────────────────────────────────────────────
 //
 //         ".container {"                      ==    ".container {"
 //         "  padding: 20px;"                  ==    "  padding: 20px;"
 //         "  width: 1080px; }"                ==    "  width: 1080px; }"
 //         ""                                  ==    ""
 //         ""                                  ==    ""
 //
 //      ────────────────────────────────────────────────────────────────────────────────
 //
 //        ✓  Submission results match expected
 //
 //        # PASS Your solution to OPERATORS passed!
 //
 //        Here's the official solution in case you want to compare notes:
 //
 //        /usr/local/lib/node_modules/learn-sass/exercises/operators/solution/soluti
 //        on.scss
 //
 //        You have 6 challenges left. Type 'learn-sass' to show the menu.



// # NESTED PROPERTIES
//
// CSS has quite a few properties that are in “namespaces;” for instance,
// font-family, font-size, and font-weight are all in the font namespace. In
// CSS, if you want to set a bunch of properties in the same namespace, you
// have to type it out each time. Sass provides a shortcut for this: just
// write the namespace once, then nest each of the sub-properties within it.
// For example:
//
//   .funky {
//     font: {
//       family: fantasy;
//       size: 30em;
//       weight: bold;
//     }
//   }
//
// is compiled to:
//
//   .funky {
//     font-family: fantasy;
//     font-size: 30em;
//     font-weight: bold; }
//
// The property namespace itself can also have a value. For example:
//
//   .funky {
//     font: 20px/24px fantasy {
//       weight: bold;
//     }
//   }
//
// is compiled to:
//
//   .funky {
//     font: 20px/24px fantasy;
//       font-weight: bold;
//   }
//
// # EXERCISE
//
// Define a selector .sassy, and use nested properties to set border-width to
// '10px', border-color to 'red' and border-radius to '5px'.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.


// .sassy {
//       border-width: 10px;
//       border-color: red;
//       border-radius: 5px;
// }
//
//
// Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    ".sassy {"                          ==    ".sassy {"
//    "  border-width: 10px;"             ==    "  border-width: 10px;"
//    "  border-color: red;"              ==    "  border-color: red;"
//    "  border-radius: 5px; }"           ==    "  border-radius: 5px; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to NESTED PROPERTIES passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/nested_properties/solutio
//   n/solution.scss
//
//   You have 5 challenges left. Type 'learn-sass' to show the menu.

// # PARENT SELECTOR
//
// Sometimes it’s useful to use a nested rule’s parent selector in other ways
// than the default. For instance, you might want to have special styles for
// when that selector is hovered over or for when the body element has a
// certain class. In these cases, you can explicitly specify where the parent
// selector should be inserted using the & character.
//
// & will be replaced with the parent selector as it appears in the CSS. This
// means that if you have a deeply nested rule, the parent selector will be
// fully resolved before the & is replaced. For example:
//
//   #main {
//     color: black;
//     a {
//       font-weight: bold;
//       &:hover { color: red; }
//     }
//   }
//
// is compiled to:
//
//   #main {
//     color: black; }
//     #main a {
//       font-weight: bold; }
//       #main a:hover {
//         color: red; }
//
// # EXERCISE
//
// Write a rule for the button element setting its color to 'black', and use
// the parent selector & to set its color to 'red' when the element has
// focus, via pseudo selector :focus.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.
      //
      // button{
      //       color: black;
      //       &:focus{
      //             color: red;
      //       }
      // }
      //
      // Your submission results compared to the expected:
      //
      //                  ACTUAL                                 EXPECTED
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //    "button {"                          ==    "button {"
      //    "  color: black; }"                 ==    "  color: black; }"
      //    "  button:focus {"                  ==    "  button:focus {"
      //    "    color: red; }"                 ==    "    color: red; }"
      //    ""                                  ==    ""
      //    ""                                  ==    ""
      //
      // ────────────────────────────────────────────────────────────────────────────────
      //
      //   ✓  Submission results match expected
      //
      //   # PASS Your solution to PARENT SELECTOR passed!
      //
      //   Here's the official solution in case you want to compare notes:
      //
      //   /usr/local/lib/node_modules/learn-sass/exercises/parent_selector/solution/
      //   solution.scss
      //
      //   You have 4 challenges left. Type 'learn-sass' to show the menu.

    // # INTERPOLATION
    //
    //  You can also use SassScript variables in selectors and property names
    //  using #{} interpolation syntax:
    //
    //     $name: foo;
    //     $attr: border;
    //     p.#{$name} {
    //       #{$attr}-color: blue;
    //     }
    //
    //  is compiled to:
    //
    //     p.foo {
    //       border-color: blue; }
    //
    //  It’s also possible to use #{} to put SassScript into property values. In
    //  most cases this isn’t any better than using a variable, but using #{} does
    //  mean that any operations near it will be treated as plain CSS. For
    //  example:
    //
    //     p {
    //       $font-size: 12px;
    //       $line-height: 30px;
    //       font: #{$font-size}/#{$line-height};
    //     }
    //
    //  is compiled to:
    //
    //     p {
    //       font: 12px/30px; }
    //
    // # EXERCISE
    //
    //  Define a variable $selector and set its value to 'article'. Then write a
    //  rule using the interpolated value of the $selector variable as selector,
    //  and set its color to #f00.
    //
    //  --
    //
    // ## HINTS
    //
    //  To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
    //  and start writing SCSS. When you are done, you must run:
    //
    //     $ learn-sass verify stylesheet.scss
    //
    //  to proceed. Your stylesheet will be tested, a report will be generated,
    //  and the lesson will be marked 'completed' if you are successful.
//
//     $selector: article;
//
//    #{ $selector}{
//           color: #f00;
//    }
//
//    Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    "article {"                         ==    "article {"
//    "  color: #f00; }"                  ==    "  color: #f00; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to INTERPOLATION passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/interpolation/solution/so
//   lution.scss
//
//   You have 3 challenges left. Type 'learn-sass' to show the menu.



// # EACH ITERATOR
//
// The @each directive usually has the form @each $var in <list or map>. $var
// can be any variable name, like $length or $name, and <list or map> is a
// SassScript expression that returns a list or a map.
//
// The @each rule sets $var to each item in the list or map, then outputs the
// styles it contains using that value of $var. For example:
//
//   @each $animal in puma, sea-slug, egret, salamander {
//     .#{$animal}-icon {
//       background-image: url('/images/#{$animal}.png');
//     }
//   }
//
// is compiled to:
//
//   .puma-icon {
//     background-image: url('/images/puma.png'); }
//   .sea-slug-icon {
//     background-image: url('/images/sea-slug.png'); }
//   .egret-icon {
//     background-image: url('/images/egret.png'); }
//   .salamander-icon {
//     background-image: url('/images/salamander.png'); }
//
// # EXERCISE
//
// Write a Sass script that generates rules for the selectors
// .#{$big-cat}-picture, where $big-cat is one of 'cheetah', 'puma',
// 'jaguar', 'panther', 'tiger', 'leopard', and sets its padding to '3em'.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.


  // @each $big-cat in cheetah, puma, jaguar, panther, tiger, leopard {
  //   .#{$big-cat}-picture {
  //     padding: 3em;
  //   }
  // }
  //
  // Your submission results compared to the expected:
  //
  //                  ACTUAL                                 EXPECTED
  // ────────────────────────────────────────────────────────────────────────────────
  //
  //    ".cheetah-picture {"                ==    ".cheetah-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ".puma-picture {"                   ==    ".puma-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ".jaguar-picture {"                 ==    ".jaguar-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ".panther-picture {"                ==    ".panther-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ".tiger-picture {"                  ==    ".tiger-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ".leopard-picture {"                ==    ".leopard-picture {"
  //    "  padding: 3em; }"                 ==    "  padding: 3em; }"
  //    ""                                  ==    ""
  //    ""                                  ==    ""
  //
  // ────────────────────────────────────────────────────────────────────────────────
  //
  //   ✓  Submission results match expected
  //
  //   # PASS Your solution to EACH ITERATOR passed!
  //
  //   Here's the official solution in case you want to compare notes:
  //
  //   /usr/local/lib/node_modules/learn-sass/exercises/each/solution/solution.sc
  //   ss
  //
  //   You have 2 challenges left. Type 'learn-sass' to show the menu.


// # FOR LOOP
//
// The @for directive repeatedly outputs a set of styles. For each
// repetition, a counter variable is used to adjust the output. The directive
// has two forms: @for $var from <start> through <end> and @for $var from
// <start> to <end>. Note the difference in the keywords through and to. $var
// can be any variable name, like $i; <start> and <end> are SassScript
// expressions that should return integers. When <start> is greater than
// <end> the counter will decrement instead of increment.
//
// The @for statement sets $var to each successive number in the specified
// range and each time outputs the nested styles using that value of $var.
// For the form from ... through, the range includes the values of <start>
// and <end>, but the form from ... to runs up to but not including the value
// of <end>. Using the through syntax,
//
//   @for $i from 1 through 3 {
//     .item-#{$i} { width: 2em * $i; }
//   }
//
// is compiled to:
//
//   .item-1 {
//     width: 2em; }
//   .item-2 {
//     width: 4em; }
//   .item-3 {
//     width: 6em; }
//
// # EXERCISE
//
// Write rules for the elements h1 through h6 that set their font-size to be
// 24px minus 3px times the heading level, i.e. h1 would have a font-size of
// 24px - 3px * 1 equal to 21px, using the @for directive.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.

//       @for $i from 1 through 6 {
//             h#{$i}{ font-size: 24px-3px *$i}
//       }
//
//       Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    "h1 {"                              ==    "h1 {"
//    "  font-size: 21px; }"              ==    "  font-size: 21px; }"
//    ""                                  ==    ""
//    "h2 {"                              ==    "h2 {"
//    "  font-size: 18px; }"              ==    "  font-size: 18px; }"
//    ""                                  ==    ""
//    "h3 {"                              ==    "h3 {"
//    "  font-size: 15px; }"              ==    "  font-size: 15px; }"
//    ""                                  ==    ""
//    "h4 {"                              ==    "h4 {"
//    "  font-size: 12px; }"              ==    "  font-size: 12px; }"
//    ""                                  ==    ""
//    "h5 {"                              ==    "h5 {"
//    "  font-size: 9px; }"               ==    "  font-size: 9px; }"
//    ""                                  ==    ""
//    "h6 {"                              ==    "h6 {"
//    "  font-size: 6px; }"               ==    "  font-size: 6px; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to FOR LOOP passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/for_loop/solution/solutio
//   n.scss
//
//   You have one challenge left. Type 'learn-sass' to show the menu.


// # WHILE LOOP
//
// The @while directive takes a SassScript expression and repeatedly outputs
// the nested styles until the statement evaluates to false. This can be used
// to achieve more complex looping than the @for statement is capable of,
// although this is rarely necessary. For example:
//
//   $i: 6;
//   @while $i > 0 {
//     .item-#{$i} { width: 2em * $i; }
//     $i: $i - 2;
//   }
//
// is compiled to:
//
//   .item-6 {
//     width: 12em; }
//
//   .item-4 {
//     width: 8em; }
//
//   .item-2 {
//     width: 4em; }
//
// # EXERCISE
//
// Write rules for the elements h1 through h6 that set their font-size to be
// 24px minus 3px times the heading level, i.e. h1 would have a font-size of
// 24px - 3px * 1 equal to 21px, using the @while directive. Compare with the
// code of the previous exercise.
//
// --
//
// ## HINTS
//
// To make a Sass (SCSS) stylesheet, create a new file with a .scss extension
// and start writing SCSS. When you are done, you must run:
//
//   $ learn-sass verify stylesheet.scss
//
// to proceed. Your stylesheet will be tested, a report will be generated,
// and the lesson will be marked 'completed' if you are successful.

// $i: 1;
// @while $i <= 6 {
//        h#{$i}{ font-size: 24px-3px *$i}
//        $i: $i+1;
// }
//
//
// Your submission results compared to the expected:
//
//                  ACTUAL                                 EXPECTED
// ────────────────────────────────────────────────────────────────────────────────
//
//    "h1 {"                              ==    "h1 {"
//    "  font-size: 21px; }"              ==    "  font-size: 21px; }"
//    ""                                  ==    ""
//    "h2 {"                              ==    "h2 {"
//    "  font-size: 18px; }"              ==    "  font-size: 18px; }"
//    ""                                  ==    ""
//    "h3 {"                              ==    "h3 {"
//    "  font-size: 15px; }"              ==    "  font-size: 15px; }"
//    ""                                  ==    ""
//    "h4 {"                              ==    "h4 {"
//    "  font-size: 12px; }"              ==    "  font-size: 12px; }"
//    ""                                  ==    ""
//    "h5 {"                              ==    "h5 {"
//    "  font-size: 9px; }"               ==    "  font-size: 9px; }"
//    ""                                  ==    ""
//    "h6 {"                              ==    "h6 {"
//    "  font-size: 6px; }"               ==    "  font-size: 6px; }"
//    ""                                  ==    ""
//    ""                                  ==    ""
//
// ────────────────────────────────────────────────────────────────────────────────
//
//   ✓  Submission results match expected
//
//   # PASS Your solution to WHILE LOOP passed!
//
//   Here's the official solution in case you want to compare notes:
//
//   /usr/local/lib/node_modules/learn-sass/exercises/while_loop/solution/solut
//   ion.scss
//
//   You've finished all the challenges! Hooray!
